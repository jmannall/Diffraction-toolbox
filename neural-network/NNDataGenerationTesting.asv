close all
clear all

rng(1)
fs = 96e3;
nfft = 8192;
c = 344;
batchSize = 200;
controlparameters = struct('fs', fs, 'nfft', nfft, 'c', c, 'difforder', 1, 'saveFiles', true);

wedgeLength = 10;
radiusS = 2;
radiusR = 3;
thetaS = 10;
thetaR = 200;
wedgeIndex = 320;
zS = 5;
zR = 5;

receiverPath = [-4 2 1.6
    1 2 1.6
    8 -4 1.6];
source = [1 -2 1.6];
vSource = [-1 -2 1.6];

updateRate = 100;
windowLength = 2 * fs / updateRate;

wedgeIndex = 270;
[receiverPath, receiverDirection, receiverData, speed] = CreatePath(receiverPath, updateRate, 'scene_1', wedgeIndex, source);

receivers = receiverPath;

radiusS = norm(source(1:2));
thetaS = wedgeIndex + sign(source(:,2)) .* acosd(source(:,1) ./ radiusS) - 180;
zS = source(3);

radiusR = vecnorm(receivers(:,1:2), 2, 2);
thetaR = wedgeIndex + sign(receivers(:,2)) .* acosd(receivers(:,1) ./ radiusR) - 180;
zR = receivers(:,3);
phii = 90;
input = [1; zeros(5, 1)];

createPlot = false;
arg = cosd(90 - phii);
l = radiusS / arg;
m = radiusR / arg;

numReceivers = length(receivers);
time = numReceivers / updateRate;

for i = 1:numReceivers
    pathLengthDir = norm(receivers(i,:) - source);
    pathLengthDiff = sqrt((radiusS + radiusR(i)) ^ 2 + (zR(i) - zS) ^ 2);
    pathLengthDir2 = sqrt(l ^ 2 + m(i) ^ 2 - 2 * l * m(i) * cosd(thetaR(i) - thetaS));
    [tfmagI(:,i), fvecI, tfcomplexI(:,i)] = SingleWedgeInterpolated(wedgeLength, wedgeIndex, thetaS, thetaR(i), radiusS, radiusR(i), zS, zR(i), controlparameters, createPlot, pathLengthDir);
    [ir(:,i), tfmag(:,i), tvec, fvec, tfcomplex(:,i)] = SingleWedge(wedgeLength, wedgeIndex, thetaS, thetaR(i), radiusS, radiusR(i), zS, zR(i), controlparameters, createPlot);
    result(i).ir= ir(:,i);
    result(i).tfmag = tfmag(:,i);
    result(i).tfcomplex = tfcomplex(:,i);
    result(i).tvec = tvec;
    result(i).fvec = fvec;
    [tfmagStore, fvecUtd, tfcomplexStoreUtd] = SingleUTDWedgeInterpolated(thetaS, thetaR(i), radiusS, radiusR(i), wedgeIndex, phii, controlparameters, pathLengthDir);
    
    sourceDirectionDiff(i) = acosd(dot(receiverDirection(i,:), (receivers(i,:) / radiusR(i))));
    sourceDirectionDir(i) = acosd(dot(receiverDirection(i,:), (receivers(i,:) - source) / pathLengthDir));
    sourceDirectionGeom(i) = acosd(dot(receiverDirection(i,:), (receivers(i,:) - vSource) / norm(receivers(i,:) - vSource)));

    if thetaR - thetaS < 180
        pathLength = pathLengthDir;
        validPathDir(i) = true;
    else
        pathLength = pathLengthDiff;
        validPathDir(i) = false;
    end


    [~, tfmagUtd(:,i), tfcomplexUtd(:,i)] = DelayLineLRFilter(input, tfmagStore, pathLength, windowLength, 1, c, fs, nfft);
end

tfdiffI = tfcomplexI;
tfdiff = [tfcomplex.diff1];
tfdir = [tfcomplex.direct];
tfgeom = [tfcomplex.geom];
tfcomplexUtd = tfcomplexUtd;

result = UniformResult(result);
ir = [result.ir];

%% Process data

figure
plot(1:numReceivers, sourceDirectionDir)
hold on
plot(1:numReceivers, sourceDirectionDiff)


%% audio
% NormaliseAudio('audio\whiteNoise96k.wav', nfft);
audioStem = 'audio\imagination';
% [audio, fsAudio] = LoopAudio([audioStem, '_normalised.wav'], time + 0.5);
[audio, fsAudio] = LoopAudio([audioStem, '.wav'], time + 0.5);

audio = resample(audio,fs,fsAudio);
% tic
% btmAudio = ConvolveIR(audio, [ir.complete], windowLength);
% toc
% audiowrite([audioStem, 'btm2_scene_1.wav'], btmAudio, fs);

%% Audio Test2
close all

tfcomplex = [result.tfcomplex];
tic
btmDirAudio = ConvolveTfcomplex(audio, tfdir, numReceivers);
btmGeomAudio = ConvolveTfcomplex(audio, tfgeom, numReceivers);
btmDiffAudio = ConvolveTfcomplex(audio, tfdiff, numReceivers);

%% HRTF

load 'ReferenceHRTF.mat' hrtfData sourcePosition

hrtfData = permute(double(hrtfData),[2,3,1]);

sourcePosition = sourcePosition(:,[1,2]);

durationPerPosition = 1 / updateRate;
%durationPerPosition = 1;
desiredAzDir = 360 - sourceDirectionDir;
desiredAzGeom = 360 - sourceDirectionGeom;
desiredAzDiff = 360 - sourceDirectionDiff;
desiredEl = linspace(0,0,numReceivers)';

desiredPositionDir = [desiredAzDir desiredEl];
desiredPositionGeom = [desiredAzGeom desiredEl];
desiredPositionDiff = [desiredAzDiff desiredEl];

interpolatedIRDir  = interpolateHRTF(hrtfData,sourcePosition,desiredPositionDir);
interpolatedIRGeom  = interpolateHRTF(hrtfData,sourcePosition,desiredPositionGeom);
interpolatedIRDiff  = interpolateHRTF(hrtfData,sourcePosition,desiredPositionDiff);

leftIRDir = squeeze(interpolatedIRDir(:,1,:));
rightIRDir = squeeze(interpolatedIRDir(:,2,:));

btmAudioL = ConvolveTfcomplex(btmDirAudio, fft(leftIRDir), numReceivers);
btmAudioL = ConvolveTfcomplex(btmDirAudio, fft(leftIRDir), numReceivers);

btmAudioL = ConvolveIR(audio, leftIRDir, windowLength, validPathDir);
btmAudioR = ConvolveIR(audio, rightIRDir, windowLength, validPathDir);

btmAudio = [btmAudioL btmAudioR];
btmIAudio = ConvolveTfcomplex(audio, tfdiffI, numReceivers);
utdAudio = ConvolveTfcomplex(audio, tfcomplexUtd, numReceivers);

toc
audiowrite([audioStem, 'btm_scene_1.wav'], btmAudio, fs);
audiowrite([audioStem, 'btmI_scene_1.wav'], btmIAudio, fs);
audiowrite([audioStem, 'utd_scene_1.wav'], utdAudio, fs);
audiowrite([audioStem, '_scene1.wav'], audio, fs);

PlotSpectrogramOfWAV([audioStem, 'btm_scene_1.wav'], [-70 0], nfft)
PlotSpectrogramOfWAV([audioStem, 'btmI_scene_1.wav'], [-70 0], nfft)
PlotSpectrogramOfWAV([audioStem, 'utd_scene_1.wav'], [-70 0], nfft)


%% IR figure

close all
figure
plot(1:length(btmAudio), btmAudio)
xlim([14000 15000])

%% Figures
close all

PlotSpectrogram(tfdiff, fvec, 1:length(receivers), [-70 0], 'Btm scene_1', true, false, 'time')
PlotSpectrogram(tfdiffI, fvecI, 1:length(receivers), [-70 0], 'Interpolated scene_1', true, false, 'time')
PlotSpectrogram(tfcomplexUtd, fvec, 1:length(receivers), [-70 0], 'Utd scene_1', true, false, 'time')

figure
semilogx(fvec, [tfmag(10).complete])
hold on
semilogx(fvecI, tfmagI(:,10))
semilogx(fvec, tfmagUtd(:,10), '--')
xlim([20 20e3])
legend('BTM', 'BTMi', 'UTD')

[ir, tfmag, ~, ~, ~] = SingleWedge(wedgeLength, wedgeIndex, thetaS, thetaR, radiusS, radiusR, zS, zR, controlparameters, false);
dirRef = tfmag.direct;
dirIr = ir.direct;
input = [1; zeros(5, 1)];
windowLength = 3;
pathLengthDir = radiusS + radiusR;
validPath = 1;
c = 344;
[~, ir] = DelayLine(input, pathLengthDir, windowLength, 1, c, fs);
tfmag = IrToTf(ir, nfft);
[trainingData, targetData, fvec, fNBand, fidx] = CreateBtmTrainingData(batchSize, controlparameters);

figure
semilogx(fc, extractdata(trainingData), '-')

x = 1;

% receiver = [-1 0 15];
% source = [0 0.5 -5];
% apex = [0 0 5];
% eVec = [0 0 1];
% 
% x = 0;
% y = 0;
% z = 1;
% 
% u = [x y z];
% u = u / norm(u);
% 
% bendingAngle = 270;
% theta = 180 - bendingAngle;
% c = cosd(theta);
% s = sind(theta);
% C = 1 - c;
% 
% d = [c -z * s y * s
%     z * s c -x * s
%     -y * s x * s c];
% Q = C * (u' * u) + d;
% 
% vReceiver = receiver * Q;
% 
% test1 = acosd(dot((vReceiver - source) / norm(vReceiver - source), eVec));
% test2 = acosd(dot((receiver - apex) / norm(apex - receiver), eVec));
%% Distributions
numObservations = 20e3;

geometry = RandomGeometryWedge(numObservations);

wedgeIndex = geometry.wedgeIndex;
bendingAngle = geometry.bendingAngle;
minAngle = geometry.minAngle;
wedgeLength = geometry.wedgeLength;
radiusS = geometry.rS;
radiusR = geometry.rR;
zS = geometry.zS;
zR = geometry.zR;
truezS = geometry.truezS;
truezR = geometry.truezR;
truezA = geometry.truezA;

%% Plots

close all

figure
histogram(wedgeIndex)
title('wedgeIndex')

figure
histogram(bendingAngle)
title('bendingAngle')

figure
histogram(minAngle)
title('minAngle')

[~,edges] = histcounts(log10(wedgeLength));
figure
histogram(wedgeLength,10.^edges)
set(gca, 'xscale','log')
title('wedgeLength')

[~,edges] = histcounts(log10(radiusS));
figure
histogram(radiusS,10.^edges)
set(gca, 'xscale','log')
title('radiusS')

[~,edges] = histcounts(log10(radiusR));
figure
histogram(radiusR,10.^edges)
set(gca, 'xscale','log')
title('radiusR')

figure
histogram(truezS)
title('zS')

figure
histogram(truezS)
title('zR')

figure
histogram([truezS; truezS])
title('zS and zR')

dZ = abs(truezS - truezR);
figure
histogram(dZ)
title('dZ')

if truezR < truezS
    sourcePart = radiusR ./ (radiusS + radiusR);
    zA = truezR + sourcePart .* dZ;
else
    sourcePart = radiusS ./ (radiusS + radiusR);
    zA = truezS + sourcePart .* dZ;
end

zAProp = truezA ./ wedgeLength;
figure
histogram(zAProp)
title('zA')

controlparameters = struct('fs', 96e3, 'nfft', 16384, 'difforder', 1);

%% Figure
for i = 1:20
    L(i,1) = sqrt((radiusS(i) + radiusR(i)) ^ 2 + (truezR(i) - truezS(i)) ^ 2);
    [~, fvec, tfcomplex(i,:)] = SingleWedgeInterpolated(wedgeLength(i), wedgeIndex(i), minAngle(i), minAngle(i) + bendingAngle(i), radiusS(i), radiusR(i), truezS(i), truezR(i), controlparameters, false);
    tfcomplexDiffRef(i,:) = L(i) * tfcomplex(i,:);
    tfmagRef(i,:) = mag2db(abs(tfcomplexDiffRef(i,:)));
    controlparameters.Rstart = L(i);
    [~, fvec, tfcomplex(i,:)] = SingleWedgeInterpolated(wedgeLength(i), wedgeIndex(i), minAngle(i), minAngle(i) + bendingAngle(i), radiusS(i), radiusR(i), truezS(i), truezR(i), controlparameters, false);
    tfcomplexDiff(i,:) = tfcomplex(i,:);
    tfmag(i,:) = mag2db(abs(tfcomplexDiff(i,:)));
    controlparameters = rmfield(controlparameters, 'Rstart');
end

figure
semilogx(fvec, tfmag)
grid on
hold on
semilogx(fvec, tfmagRef, '--')
xlim([20 20e3])
ylim([-100 10])